'use strict'
const exec = require('child_process').exec
const AWS = require("aws-sdk")
const fs = require("fs")

const s3 = new AWS.S3();
const ssm = new AWS.SSM();

var config = {
    "S3BucketForCerts" : "",
    "certExpiryInDays" : 30,
    "serverCertFileName" : "server.crt",
    "serverKeyFileName" : "server.key",
    "serverKeyPassParam" : "",
    "userKeyPassParam" : "",
    "userId" : "",
    "forceCreateNewUserCert": false,
    "writeConsoleLog" : false
}

/*-------------------------------------------------------------------*/
// Set the config object
/*-------------------------------------------------------------------*/
exports.loadConfig = function(configIn){
    if(configIn.S3BucketForCerts){
        config.S3BucketForCerts = configIn.S3BucketForCerts
    }
    if(configIn.certExpiryInDays){
        config.certExpiryInDays = configIn.certExpiryInDays
    }
    if(configIn.forceCreateNewUserCert){
        config.forceCreateNewUserCert = configIn.forceCreateNewUserCert
    } 
    if(configIn.serverCertFileName){
        config.serverCertFileName = configIn.serverCertFileName
    } 
    if(configIn.serverKeyFileName){
        config.serverKeyFileName = configIn.serverKeyFileName
    }
    if(configIn.serverKeyPassParam){
        config.serverKeyPassParam = configIn.serverKeyPassParam
    }
    if(configIn.userKeyPassParam){
        config.userKeyPassParam = configIn.userKeyPassParam
    }
    if(configIn.userId){
        config.userId = configIn.userId
    } 
    if(configIn.forceCreateNewUserCert){
        config.forceCreateNewUserCert = configIn.forceCreateNewUserCert
    } 
    if(configIn.writeConsoleLog){
        config.writeConsoleLog = configIn.writeConsoleLog
    } 
    writeConsoleLog("Config is : " + JSON.stringify(config,null,2))
}

/*-------------------------------------------------------------------*/
// Main method - Generate user certificate. Create a new one if one doesn't exist
// If one exists, retrieve from S3 and check if it is still valid (not expired)
// If expired, then recreate a new one
/*-------------------------------------------------------------------*/
exports.generateCert = async function(){
    var response = {
        "success" : false,
        "payload" :  {}
    }
    try{
        //Check if the config object is correct set
        writeConsoleLog("...Checking Config")
        checkConfig()
        writeConsoleLog("...Config in good shape")

        // Get pass phrases from paramter store
        var passPhrases= await getSecretsFromParameterStore(config.serverKeyPassParam, config.userKeyPassParam)
        writeConsoleLog("...Received passPhrases from secrets store")
        
        // Get Server Key and Server Cert
        var serverKey = await downloadFromS3(config.serverKeyFileName)
        writeConsoleLog("...Downloaded sever key from S3")
        var serverCert = await downloadFromS3(config.serverCertFileName)
        writeConsoleLog("...Downloaded sever cert from S3")
        
        // Create or Get the user certificate
        var userCertJson = {}
        if(config.forceCreateNewUserCert){
            userCertJson = await createCertForUser(passPhrases.userKeyPass, passPhrases.serverKeyPass, serverKey, serverCert)
            writeConsoleLog("...Created Cert for the User")
        } else {
            // Check if the user certificate already exists
            writeConsoleLog("Downloading user cert from S3")
            var userCert = await downloadFromS3("user/" + config.userId+".cert")
            if(userCert.Body && userCert.Body != ""){
                userCertJson = JSON.parse(userCert.Body)
                var expireBy = new Date(JSON.parse(userCertJson.expireBy));
                var now = new Date();
                now.setDate(now.getDate()+1)
                if(now > expireBy){
                    writeConsoleLog("...User Certs expired, creating a new one")
                    userCertJson = await createCertForUser(passPhrases.userKeyPass, passPhrases.serverKeyPass, serverKey, serverCert)
                }
            }else{
                writeConsoleLog("...User Certs doesn't exist. Create a new one")
                userCertJson = await createCertForUser(passPhrases.userKeyPass, passPhrases.serverKeyPass, serverKey, serverCert)
            }
        }
        userCertJson.serverCert = new Buffer(serverCert.Body).toString('base64')
        userCertJson.userKeyPass = passPhrases.userKeyPass
        response.payload = userCertJson
        response.success = true
        writeConsoleLog("Response is " + JSON.stringify(response,null,2))
        return response

    }catch(functionError){
        response.success = false
        if(functionError.message){
            writeConsoleLog("Function Error : " + JSON.stringify(functionError.message))
            response.payload = functionError.message
        }else{
            writeConsoleLog("Function Error : " + JSON.stringify(functionError))
            response.payload = JSON.stringify(functionError)
        }
         writeConsoleLog("Response is " + JSON.stringify(response,null,2))
         return response
    }
}

/*-------------------------------------------------------------------*/
// Run OPENSSL linux command to create the certs
/*-------------------------------------------------------------------*/
async function createCertForUser(userKeyPass, serverKeyPass, serverKey, serverCert){
    try{
        const subject = "/CN=" + config.userId
        // Download serverKey and serverCert to local
        fs.writeFileSync("/tmp/server.key", serverKey.Body)
        fs.writeFileSync("/tmp/server.crt", serverCert.Body)

        // Create CSR for the user
        const csrCmd = "openssl req -newkey rsa:2048 -keyout /tmp/usertmp.key -out /tmp/user.csr -nodes -days " + config.certExpiryInDays + " -subj " + '"' + subject + '"' 
        await executeOpenSSL(csrCmd)
        
        // Encrypt the user key using passphrase
        const encUserKeyCmd = "openssl rsa -aes256 -in /tmp/usertmp.key -out /tmp/user.key -passout pass:" +  userKeyPass
        await executeOpenSSL(encUserKeyCmd)

        const signCsrCmd = "openssl x509 -req -in /tmp/user.csr -CA /tmp/server.crt -CAkey /tmp/server.key -passin pass:" + serverKeyPass + " -out /tmp/user.crt -set_serial 01 -days " + config.certExpiryInDays
        await executeOpenSSL(signCsrCmd)

        //Create a JSON content to upload to S3
        var userCertJson = {}
        var now = new Date()
        userCertJson.expireBy = JSON.stringify(now.setDate(now.getDate() + config.certExpiryInDays ))
        var certBuff = fs.readFileSync("/tmp/user.crt")
        userCertJson.cert = new Buffer(certBuff).toString('base64')
        var keyBuff = fs.readFileSync("/tmp/user.key")
        userCertJson.key = new Buffer(keyBuff).toString('base64')
        //Upload the JSON content to S3
        await uploadToS3("user/"+config.userId+".cert",JSON.stringify(userCertJson))
        return userCertJson
    }catch(functionError){
        throw new Error(functionError);
    }
}

/*-------------------------------------------------------------------*/
// Upload user keys to S3 - Util function
/*-------------------------------------------------------------------*/
function uploadToS3(key, content) {
    return new Promise((resolve, reject) => {
        try {
            var params = {
                Body: content,
                Bucket: config.S3BucketForCerts,
                Key: key
            }
            s3.putObject(params, (S3PutError, data) => {
                if (S3PutError) {
                    writeConsoleLog('Error in putting the cert back to S3: ' +  JSON.stringify(S3PutError))
                    reject(S3PutError)
                }
                resolve(data)
            })
        } catch (functionError) {
            writeConsoleLog('Error in uploadToS3 function: ' + JSON.stringify(functionError))
            reject(functionError)
        }
    })
}

/*-------------------------------------------------------------------*/
//Execute OpenSSL Command
/*-------------------------------------------------------------------*/
function executeOpenSSL(command) {
    writeConsoleLog("Command is: " + command)
    return new Promise((resolve,reject) => {
        exec(command,(execError,stdout,stderr)=>{
            try{
                if (execError) {
                    writeConsoleLog('stderr: ' + JSON.stringify(stderr))
                    writeConsoleLog('stdout: ' + JSON.stringify(stdout))
                    reject(execError)
                }
                resolve('executed')
            }catch(functionError){
                writeConsoleLog('OpenSSL error: ' + JSON.stringify(functionError))
                reject(functionError)
            }
        })
    })

}

/*-------------------------------------------------------------------*/
// Download files from S3 - Util function
/*-------------------------------------------------------------------*/
function downloadFromS3(key) {
    return new Promise((resolve, reject) => {
        try {
            var params = {
                Bucket: config.S3BucketForCerts,
                Key: key
            }
            s3.getObject(params, (S3GetError, data) => {
                if (S3GetError) {
                    writeConsoleLog("Error downloading file from S3. Key name is: " + key)
                    writeConsoleLog("...S3 Error is" + JSON.stringify(S3GetError))
                    resolve(S3GetError)
                }
                resolve(data)
            })
        } catch (functionError) {
            writeConsoleLog("Function Error downloading file from S3. Key name is: " + key)
            resolve(functionError)
        }
    })
}

/*-------------------------------------------------------------------*/
// Get secrets from Parameter store
/*-------------------------------------------------------------------*/
function getSecretsFromParameterStore(serverKeyPassParam, userKeyPassParam){
    var response = {}
    response.serverKeyPass = ""
    response.userKeyPass = ""
    
    return new Promise((resolve,reject) => {
        try{
            var params = {
                Names: [serverKeyPassParam,userKeyPassParam],
                WithDecryption: true 
            }
            ssm.getParameters(params,(paramsGetError,data)=>{
                if(paramsGetError){
                    reject(paramsGetError)
                }
                if(data.Parameters && Array.isArray(data.Parameters)){
                    var parameters = data.Parameters
                    if(parameters.length == 2){
                        parameters.forEach((parameter,index)=>{
                            if(parameter.Name == serverKeyPassParam){
                                response.serverKeyPass = parameter.Value
                            }
                            if(parameter.Name == userKeyPassParam){
                                response.userKeyPass = parameter.Value
                            }
                        })
                        resolve(response)
                    }else{
                        reject('No enough parameters retrieved. Need two parameters')
                    }
                }else{
                    reject('No parameters retrieved')
                }
                
            })
        }catch(functionError){
            reject(functionError)
        }
        
    })
}

/*-------------------------------------------------------------------*/
// Check if the config object is valid
/*-------------------------------------------------------------------*/
function checkConfig(){
    if(!config){
        throw new Error("Config object cannot be null or undefined")
    }
    if(typeof config.S3BucketForCerts === 'undefined' || config.S3BucketForCerts === ""){
        throw new Error("S3BucketForCerts in config object cannot be null, empty or undefined")
    }
    if(typeof config.serverCertFileName === 'undefined' || config.serverCertFileName === ""){
        throw new Error("serverCertFileName in config object cannot be null, empty or undefined")
    }
    if(typeof config.serverKeyFileName === 'undefined' || config.serverKeyFileName === ""){
        throw new Error("serverKeyFileName in config object cannot be null, empty or undefined")
    }
    if(typeof config.serverKeyPassParam === 'undefined' || config.serverKeyPassParam === ""){
        throw new Error("serverKeyPassParam in config object cannot be null, empty or undefined")
    }
    if(typeof config.userKeyPassParam === 'undefined' || config.userKeyPassParam === ""){
        throw new Error("userKeyPassParam in config object cannot be null, empty or undefined")
    }
    if(typeof config.userId === 'undefined' || config.userId === ""){
        throw new Error("userId in config object cannot be be null, empty or undefined")
    }
    if(typeof config.certExpiryInDays === 'undefined' || config.certExpiryInDays < 1){
        throw new Error("certExpiryInDays in config object cannot be undefined or lesser than 1 day")
    }
}

/*-------------------------------------------------------------------*/
//Write console logs
/*-------------------------------------------------------------------*/
function writeConsoleLog(message){
    if(config.writeConsoleLog){
        console.log(message)
    }
}